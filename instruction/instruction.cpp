#include "math.h"
#include "stack.h"
// #include "control.h"
#include "constants.h"
#include "loads.h"
#include "stores.h"
#include "comparisons.h"
using namespace std;

Instruction* getInstrucion(uint8_t opCode){
    switch(opCode){
		// constants
		case 0x00: return new NOP;
		case 0x01: return new ACONST_NULL;
		case 0x02: return new ICONST_M1;
		case 0x03: return new ICONST_0;
		case 0x04: return new ICONST_1;
		case 0x05: return new ICONST_2;
		case 0x06: return new ICONST_3;
		case 0x07: return new ICONST_4;
		case 0x08: return new ICONST_5;
		case 0x09: return new LCONST_0;
		case 0x0a: return new LCONST_1;
		case 0x0b: return new FCONST_0;
		case 0x0c: return new FCONST_1;
		case 0x0d: return new FCONST_2;
		case 0x0e: return new LCONST_0;
		case 0x0f: return new LCONST_1;
		case 0x10: return new BIPUSH;
		case 0x11: return new SIPUSH;
		// loads
		// case 0x12: return &LDC{};
		// case 0x13: return &LDC_W{};
		// case 0x14: return &LDC2_W{};
		case 0x15: return new ILOAD;
		case 0x16: return new LLOAD;
		case 0x17: return new FLOAD;
		case 0x18: return new DLOAD;
		case 0x19: return new ALOAD;
		case 0x1a: return new ILOAD_0;
		case 0x1b: return new ILOAD_1;
		case 0x1c: return new ILOAD_2;
		case 0x1d: return new ILOAD_3;
		case 0x1e: return new LLOAD_0;
		case 0x1f: return new LLOAD_1;
		case 0x20: return new LLOAD_2;
		case 0x21: return new LLOAD_3;
		case 0x22: return new FLOAD_0;
		case 0x23: return new FLOAD_1;
		case 0x24: return new FLOAD_2;
		case 0x25: return new FLOAD_3;
		case 0x26: return new DLOAD_0;
		case 0x27: return new DLOAD_1;
		case 0x28: return new DLOAD_2;
		case 0x29: return new DLOAD_3;
		case 0x2a: return new ALOAD_0;
		case 0x2b: return new ALOAD_1;
		case 0x2c: return new ALOAD_2;
		case 0x2d: return new ALOAD_3;
		// case 0x2e: return iaload;
		// case 0x2f: return laload;
		// case 0x30: return faload;
		// case 0x31: return daload;
		// case 0x32: return aaload;
		// case 0x33: return baload;
		// case 0x34: return caload;
		// case 0x35: return saload;
		case 0x36: return new ISTORE;
		case 0x37: return new LSTORE;
		case 0x38: return new FSTORE;
		case 0x39: return new DSTORE;
		case 0x3a: return new ASTORE;
		case 0x3b: return new ISTORE_0;
		case 0x3c: return new ISTORE_1;
		case 0x3d: return new ISTORE_2;
		case 0x3e: return new ISTORE_3;
		case 0x3f: return new LSTORE_0;
		case 0x40: return new LSTORE_1;
		case 0x41: return new LSTORE_2;
		case 0x42: return new LSTORE_3;
		case 0x43: return new FSTORE_0;
		case 0x44: return new FSTORE_1;
		case 0x45: return new FSTORE_2;
		case 0x46: return new FSTORE_3;
		case 0x47: return new DSTORE_0;
		case 0x48: return new DSTORE_1;
		case 0x49: return new DSTORE_2;
		case 0x4a: return new DSTORE_3;
		case 0x4b: return new ASTORE_0;
		case 0x4c: return new ASTORE_1;
		case 0x4d: return new ASTORE_2;
		case 0x4e: return new ASTORE_3;
		// case 0x4f: return iastore;
		// case 0x50: return lastore;
		// case 0x51: return fastore;
		// case 0x52: return dastore;
		// case 0x53: return aastore;
		// case 0x54: return bastore;
		// case 0x55: return castore;
		// case 0x56: return sastore;
		case 0x57: return new POP;
		case 0x58: return new POP2;
		case 0x59: return new DUP;
		// case 0x5a: return dup_x1;
		// case 0x5b: return dup_x2;
		// case 0x5c: return dup2;
		// case 0x5d: return dup2_x1;
		// case 0x5e: return dup2_x2;
		case 0x5f: return new SWAP;
		case 0x60: return new IADD;
		case 0x61: return new LADD;
		case 0x62: return new FADD;
		case 0x63: return new DADD;
		case 0x64: return new ISUB;
		case 0x65: return new LSUB;
		case 0x66: return new FSUB;
		case 0x67: return new DSUB;
		case 0x68: return new IMUL;
		case 0x69: return new LMUL;
		case 0x6a: return new FMUL;
		case 0x6b: return new DMUL;
		case 0x6c: return new IDIV;
		case 0x6d: return new LDIV;
		case 0x6e: return new FDIV;
		case 0x6f: return new DDIV;
		case 0x70: return new IREM;
		case 0x71: return new LREM;
		case 0x72: return new FREM;
		case 0x73: return new DREM;
		case 0x74: return new INEG;
		case 0x75: return new LNEG;
		case 0x76: return new FNEG;
		case 0x77: return new DNEG;
		case 0x78: return new ISHL;
		case 0x79: return new LSHL;
		case 0x7a: return new ISHR;
		case 0x7b: return new LSHR;
		case 0x7c: return new IUSHR;
		case 0x7d: return new LUSHR;
		case 0x7e: return new IAND;
		case 0x7f: return new LAND;
		case 0x80: return new IOR;
		case 0x81: return new LOR;
		case 0x82: return new IXOR;
		case 0x83: return new LXOR;
		case 0x84: return new IINC;
		// case 0x85: return i2l;
		// case 0x86: return i2f;
		// case 0x87: return i2d;
		// case 0x88: return l2i;
		// case 0x89: return l2f;
		// case 0x8a: return l2d;
		// case 0x8b: return f2i;
		// case 0x8c: return f2l;
		// case 0x8d: return f2d;
		// case 0x8e: return d2i;
		// case 0x8f: return d2l;
		// case 0x90: return d2f;
		// case 0x91: return i2b;
		// case 0x92: return i2c;
		// case 0x93: return i2s;
		// case 0x94: return lcmp;
		// case 0x95: return fcmpl;
		// case 0x96: return fcmpg;
		// case 0x97: return dcmpl;
		// case 0x98: return dcmpg;
		case 0x99: return new IFEQ;
		case 0x9a: return new IFNE;
		case 0x9b: return new IFLT;
		case 0x9c: return new IFGE;
		case 0x9d: return new IFGT;
		case 0x9e: return new IFLE;
		// case 0x9f: return NewIfICmpEQ();
		// case 0xa0: return NewIfICmpNE();
		// case 0xa1: return NewIfICmpLT();
		// case 0xa2: return NewIfICmpGE();
		// case 0xa3: return NewIfICmpGT();
		// case 0xa4: return NewIfICmpLE();
		// case 0xa5: return NewIfACmpEQ();
		// case 0xa6: return NewIfACmpNE();
		// case 0xa7: return &Goto{};
		// case 0xa8: return &JSR{};
		// case 0xa9: return &RET{};
		// case 0xaa: return &TableSwitch{};
		// case 0xab: return &LookupSwitch{};
		// case 0xac: return ireturn;
		// case 0xad: return lreturn;
		// case 0xae: return freturn;
		// case 0xaf: return dreturn;
		// case 0xb0: return areturn;
		// case 0xb1: return _return;
		// case 0xb2: return &GetStatic{};
		// case 0xb3: return &PupStatic{};
		// case 0xb4: return &GetField{};
		// case 0xb5: return &PutField{};
		// case 0xb6: return &InvokeVirtual{};
		// case 0xb7: return &InvokeSpecial{};
		// case 0xb8: return &InvokeStatic{};
		// case 0xb9: return &InvokeInterface{};
		// case 0xba: return &InvokeDynamic{};
		// case 0xbb: return &New{};
		// case 0xbc: return &NewArray{};
		// case 0xbd: return &ANewArray{};
		// case 0xbe: return arraylength;
		// case 0xbf: return athrow;
		// case 0xc0: return &CheckCast{};
		// case 0xc1: return &InstanceOf{};
		// case 0xc2: return monitorenter;
		// case 0xc3: return monitorexit;
		// case 0xc4: return &Wide{};
		// case 0xc5: return &MultiANewArray{};
		// case 0xc6: return NewIfNull();
		// case 0xc7: return NewIfNonNull();
		// case 0xc8: return &GotoW{};
		// case 0xc9: return &JSR_W{};
		// //case 0xca: todo breakpoint
		// case 0xfe: return invoke_native; // impdep1
		// case 0xff: return &Bootstrap{}; // impdep2
		default:
			// panic(fmt.Errorf("invalid opcode: %v", opcode))
			cerr << "invalid opcode: " << (int)opCode << endl;
			exit(1);
    }
	return nullptr;
}